vec2 CalcParallaxTexCoords(sampler2D dispMap, mat3 tbnMatrix, vec3 directionToEye, vec2 texCoords, float scale, float bias){
	return texCoords.xy + (directionToEye * tbnMatrix).xy * (texture(dispMap, texCoords.xy).r * scale + bias);
}

vec2 CalcParallaxTexCoordsSte(sampler2D dispMap, mat3 tbnMatrix, vec3 directionToEye, vec2 texCoords, float scale, float bias){
	//10 or 8
	//float minLayers = 10;
	//20 or 32
    //float maxLayers = 20;
    float numLayers = mix(5, 10, abs(dot(vec3(0.0, 0.0, 1.0), directionToEye)));
	//float numLayers = 10;
    float layerDepth = 1.0f / numLayers;
    float currentLayerDepth = 0.0f;
    vec2 deltaTexCoords = (directionToEye * tbnMatrix).xy * scale / numLayers;
	
    vec2 currentTexCoords = texCoords;
    float currentDepthMapValue = texture(dispMap, currentTexCoords).r + bias;
    
    while(currentLayerDepth < currentDepthMapValue){
        currentTexCoords += deltaTexCoords;
        currentDepthMapValue = texture(dispMap, currentTexCoords).r + bias;
        currentLayerDepth += layerDepth;
    }
	
    vec2 prevTexCoords = currentTexCoords - deltaTexCoords;
	
    float afterDepth = currentDepthMapValue - currentLayerDepth;
	
    float weight = afterDepth / (afterDepth - texture(dispMap, prevTexCoords).r + bias - currentLayerDepth + layerDepth);
	return prevTexCoords * weight + currentTexCoords * (1.0f - weight);
}

float SampleShadowMap(sampler2D shadowMap, vec2 coords, float compare){
	return step(compare, texture(shadowMap, coords.xy).r);
}

float SampleShadowMapLinear(sampler2D shadowMap, vec2 coords, float compare, vec2 texelSize){
	vec2 pixelPos = coords/texelSize + vec2(0.5f);
	vec2 fracPart = fract(pixelPos);
	vec2 startTexel = (pixelPos - fracPart) * texelSize;
	
	return mix(mix(SampleShadowMap(shadowMap, startTexel, compare), SampleShadowMap(shadowMap, startTexel + vec2(0.0f, texelSize.y), compare), fracPart.y), mix(SampleShadowMap(shadowMap, startTexel + vec2(texelSize.x, 0.0f), compare), SampleShadowMap(shadowMap, startTexel + texelSize, compare), fracPart.y), fracPart.x);
}

float SampleShadowMapPCF(sampler2D shadowMap, vec2 coords, float compare, vec2 texelSize){
	const float NUM_SAMPLES = 3.0f;
	const float SAMPLES_START = (NUM_SAMPLES-1.0f)/2.0f;
	const float NUM_SAMPLES_SQUARED = NUM_SAMPLES*NUM_SAMPLES;

	float result = 0.0f;
	for(float y = -SAMPLES_START; y <= SAMPLES_START; y += 1.0f){
		for(float x = -SAMPLES_START; x <= SAMPLES_START; x += 1.0f){
			result += SampleShadowMapLinear(shadowMap, coords + vec2(x,y) * texelSize, compare, texelSize);
		}
	}
	return result/NUM_SAMPLES_SQUARED;
}

float linstep(float low, float high, float v){
	return clamp((v-low)/(high-low), 0.0f, 1.0f);
}

float SampleVarianceShadowMap(sampler2D shadowMap, vec2 coords, float compare, float varianceMin, float lightBleedReductionAmount){
	vec2 moments = texture(shadowMap, coords.xy).xy;
	
	float variance = max(moments.y - moments.x * moments.x, varianceMin);
	
	float d = compare - moments.x;
	
	return min(max(step(compare, moments.x), linstep(lightBleedReductionAmount, 1.0f, variance / (variance + d*d))), 1.0f);
}